import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser }  			   from '@angular/common';
import { HttpClient, HttpHeaders }  	   from '@angular/common/http';
import { environment } 	      			   from '../../environments/environment';
import { Observable, Subject, pipe } 	   from 'rxjs';
import { map } 							   from 'rxjs/operators';

@Injectable({
  	providedIn: 'root'
})
export class AuthService {

	apiUrl: string = environment.apiUrl;
	redirectUrl: string; //We store the url where user tried to go
	private token: string;
	tokenSubject = new Subject<string>();

 	constructor(private http: HttpClient, @Inject(PLATFORM_ID) private platform: any) {}

 	getToken(): string | null {
    	if (!this.token && isPlatformBrowser(this.platform)) {
      		this.token = localStorage.getItem('user-token');
    	}
    	return this.token;
  	}

   	private setToken(token: string): void {
   		if(isPlatformBrowser(this.platform)) {
	    	localStorage.setItem('user-token', token);
	    	this.token = token;
	    	this.emitTokenSubject();		
   		}
  	}

 	emitTokenSubject() {
 		this.tokenSubject.next(this.token);
 	}

	getUser(): UserInterface | null {
		if(isPlatformBrowser(this.platform)) {
	  		const token = this.getToken();
	  		if (token) {
	  			let payload;
	  			//contains all data about user (generated by jwt.sign() on models/User.js backend)
	    		payload = token.split('.')[1];
	    		payload = window.atob(payload);
	    		return JSON.parse(payload); 
	  		} else {
	    		return null;
	  		}			
		}
		else {
			return null;
		}
	}

	isLoggedIn(): boolean {
	  	const user = this.getUser();
	  	if (user) {
	    	return user.exp > Date.now() / 1000;
	  	} else {
	    	return false;
	  	}
	}

 	login(loginForm): Observable<void> {
 		return this.http.post(`${this.apiUrl}/account/login`, loginForm, {responseType: 'text'}).pipe(
 			map((token: string) => {
 				this.setToken(token);
 			})
 		);
 	}

 	register(registerForm): Observable<void> {
 		return this.http.post(`${this.apiUrl}/account/register`, registerForm, {responseType: 'text'}).pipe(
 			map((token: string) => {
 				this.setToken(token);
 			})
 		);
 	}

 	authFacebook(user_fb): Observable<void> {
 		return this.http.post(`${this.apiUrl}/account/facebook`, user_fb, {responseType: 'text'}).pipe(
 			map((token: string) => {
 				this.setToken(token);
 			})
 		);
 	}

  	editUser(editUserForm): Observable<void> {
 		return this.http.put(`${this.apiUrl}/account/user`, editUserForm, {responseType: 'text'}).pipe(
 			map((token: string) => {
 				this.setToken(token);
 			})
 		);
 	}

  	logout(): void {
  		if(isPlatformBrowser(this.platform)) {
	    	this.token = null;
	    	localStorage.removeItem('user-token');
	    	this.emitTokenSubject();
	    }
  	}

 	forgottenPassword(forgottenForm): Observable<string> {
 		return this.http.post(`${this.apiUrl}/account/forgotten-password`, forgottenForm, {responseType: 'text'});
 	}

 	resetPassword(resetForm): Observable<string> {
 		return this.http.post(`${this.apiUrl}/account/reset-password`, resetForm, {responseType: 'text'});
 	}

}

export interface UserInterface {
	_id: string;
	firstname: string;
	lastname: string;
	email: string;
	exp: number;
	iat: number;
}